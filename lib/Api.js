// Generated by CoffeeScript 1.7.1
(function() {
  var Api, TodoLists, Util, async, debug, fs, moment, request, util, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  util = require("util");

  request = require("request");

  moment = require("moment");

  _ = require("underscore");

  debug = require("debug")("Baseamp:Todo");

  Util = require("./Util");

  fs = require("fs");

  async = require("async");

  TodoLists = require("./TodoLists");

  Api = (function() {
    Api.prototype.vcr = false;

    Api.prototype.endpoints = {
      todoLists: "https://basecamp.com/{{{account_id}}}/api/v1/projects/{{{project_id}}}/todolists.json",
      todoList: "https://basecamp.com/{{{account_id}}}/api/v1/projects/{{{project_id}}}/todolists/{{{todolist_id}}}.json",
      todo: "https://basecamp.com/{{{account_id}}}/api/v1/projects/{{{project_id}}}/todos/{{{todo_id}}}.json"
    };

    function Api(config) {
      this.uploadTodoLists = __bind(this.uploadTodoLists, this);
      this.config = config || {};
      if (this.config.username == null) {
        throw new Error("Need a username");
      }
      if (this.config.password == null) {
        throw new Error("Need a password");
      }
      if (this.config.account_id == null) {
        throw new Error("Need a account_id");
      }
      if (this.config.project_id == null) {
        throw new Error("Need a project_id");
      }
      if (this.config.fixture_dir == null) {
        this.config.fixture_dir = "" + __dirname + "/../test/fixtures";
      }
    }

    Api.prototype.uploadTodoLists = function(localLists, cb) {
      return this.downloadTodoLists((function(_this) {
        return function(err, remoteLists) {
          var allRemoteLists, allRemoteTodos, localList, opts, payload, remoteId, remoteList, remoteListsWithSameName, todo, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
          remoteLists = new TodoLists(remoteLists);
          if (err) {
            return cb(err);
          }
          allRemoteLists = {};
          allRemoteTodos = {};
          _ref = remoteLists.lists;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            remoteList = _ref[_i];
            allRemoteLists[remoteList.id] = remoteList;
            _ref1 = remoteList.todos;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              todo = _ref1[_j];
              allRemoteTodos[todo.id] = todo;
            }
          }
          _ref2 = localLists.lists;
          _results = [];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            localList = _ref2[_k];
            if (!localList.id || (allRemoteLists[localList.id] == null)) {
              remoteListsWithSameName = (function() {
                var _results1;
                _results1 = [];
                for (remoteId in allRemoteLists) {
                  remoteList = allRemoteLists[remoteId];
                  if (remoteList.name === localList.name) {
                    _results1.push(remoteList);
                  }
                }
                return _results1;
              })();
              if (remoteListsWithSameName.length === 1) {
                localList.id = remoteListsWithSameName[0].id;
              }
              opts = {
                method: "post",
                url: _this.endpoints["todoLists"]
              };
              payload = {
                name: localList.name
              };
              if (allRemoteLists[localList.id] != null) {
                opts.method = "put";
                opts.url = _this.endpoints["todoList"];
                opts.replace = {
                  todolist_id: localList.id
                };
                payload.position = localList.position;
              }
              _results.push(_this._request(opts, payload, function(err, data) {
                var localTodo, remoteTodo, remoteTodosWithSameName, _l, _len3, _ref3;
                if (err) {
                  return cb(err);
                }
                debug(util.inspect({
                  opts: opts,
                  payload: payload,
                  err: err,
                  data: data
                }));
                localList.id = data.id;
                _ref3 = localList.todos;
                for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
                  localTodo = _ref3[_l];
                  if (!localTodo.id || (allRemoteTodos[localTodo.id] == null)) {
                    remoteTodosWithSameName = (function() {
                      var _results1;
                      _results1 = [];
                      for (remoteId in allRemoteTodos) {
                        remoteTodo = allRemoteTodos[remoteId];
                        if (remoteTodo.name === localTodo.name) {
                          _results1.push(remoteTodo);
                        }
                      }
                      return _results1;
                    })();
                    if (remoteTodosWithSameName.length === 1) {
                      localTodo.id = remoteTodosWithSameName[0].id;
                    }
                    opts = {
                      method: "post",
                      url: _this.endpoints["todoList"],
                      replace: {
                        todolist_id: localTodo.id
                      }
                    };
                    payload = {
                      content: localTodo.content
                    };
                    if (allRemoteLists[localList.id] != null) {
                      opts.method = "put";
                      opts.url = _this.endpoints["todo"];
                      opts.replace = {
                        todo_id: localTodo.id
                      };
                      payload.position = localTodo.position;
                      payload.todolist_id = localTodo.todolist_id;
                      payload.completed = localTodo.category === "completed" ? true : false;
                    }
                    _this._request(opts, payload, function(err, data) {
                      if (err) {
                        return cb(err);
                      }
                      debug(util.inspect({
                        opts: opts,
                        payload: payload,
                        err: err,
                        data: data
                      }));
                      return localTodo.id = data.id;
                    });
                  }
                }
                return debug(util.inspect({
                  wId: localLists.lists,
                  remoteTodosWithSameName: remoteTodosWithSameName
                }));
              }));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
      })(this));
    };

    Api.prototype.downloadTodoLists = function(cb) {
      return this._request(this.endpoints["todoLists"], null, (function(_this) {
        return function(err, lists) {
          var list, q, retrieveUrls;
          if (err) {
            return cb(err);
          }
          retrieveUrls = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = lists.length; _i < _len; _i++) {
              list = lists[_i];
              if (list.url != null) {
                _results.push(list.url);
              }
            }
            return _results;
          })();
          if (!retrieveUrls.length) {
            return cb(new Error("Found no urls in lists"));
          }
          lists = [];
          q = async.queue(function(url, callback) {
            return _this._request(url, null, function(err, todoList) {
              if (err) {
                debug("Error retrieving " + url + ". " + err);
              }
              lists.push(todoList);
              return callback();
            });
          }, 4);
          q.push(retrieveUrls);
          return q.drain = function() {
            return cb(null, lists);
          };
        };
      })(this));
    };

    Api.prototype._request = function(opts, payload, cb) {
      var data, filename, json;
      if (_.isString(opts)) {
        opts = {
          url: opts
        };
      }
      opts.url = Util.template(opts.url, this.config, opts.replace);
      opts.body = payload;
      if (opts.method == null) {
        opts.method = "get";
      }
      if (opts.json == null) {
        opts.json = true;
      }
      if (opts.auth == null) {
        opts.auth = {
          username: this.config.username,
          password: this.config.password
        };
      }
      if (opts.headers == null) {
        opts.headers = {
          "User-Agent": "Baseamp (https://github.com/kvz/baseamp)"
        };
      }
      if (opts.url.substr(0, 7) === "file://") {
        filename = opts.url.replace(/^file\:\/\//, "");
        json = fs.readFileSync(Util.template(filename, this.config));
        data = JSON.parse(json);
        return cb(null, data);
      }
      return request[opts.method](opts, (function(_this) {
        return function(err, req, data) {
          var msg, status;
          status = "" + req.statusCode;
          if (!status.match(/[23][0-9]{2}/)) {
            msg = "Status code " + status + " during " + (opts.method.toUpperCase()) + " '" + opts.url + "'";
            err = new Error(msg);
            return cb(err, data);
          }
          if (_this.vcr === true && opts.url.substr(0, 7) !== "file://") {
            debug("VCR: Recording " + opts.url + " to disk so we can watch later : )");
            fs.writeFileSync(Util.template(_this._toFixtureFile(opts.url), _this.config), JSON.stringify(_this._toFixture(data), null, 2));
          }
          return cb(err, data);
        };
      })(this));
    };

    Api.prototype._toFixtureVal = function(val, key) {
      var newVal;
      newVal = _.clone(val);
      if (_.isObject(newVal) || _.isArray(newVal)) {
        newVal = this._toFixture(newVal);
      } else if (key === "account_id") {
        newVal = 11;
      } else if (key === "url") {
        newVal = "file://" + this._toFixtureFile(newVal);
      } else if (("" + key).slice(-4) === "_url") {
        newVal = "http://example.com/";
      } else if (_.isNumber(newVal)) {
        newVal = 22;
      } else if (_.isBoolean(newVal)) {
        newVal = false;
      }
      return newVal;
    };

    Api.prototype._toFixture = function(obj) {
      var key, newObj, val, _i, _len;
      newObj = _.clone(obj);
      if (_.isObject(newObj)) {
        for (key in newObj) {
          val = newObj[key];
          newObj[key] = this._toFixtureVal(val, key);
        }
      } else if (_.isArray(newObj)) {
        for (key = _i = 0, _len = newObj.length; _i < _len; key = ++_i) {
          val = newObj[key];
          newObj[key] = this._toFixtureVal(val, key);
        }
      } else {
        newObj = this._toFixtureVal(newObj);
      }
      return newObj;
    };

    Api.prototype._toFixtureFile = function(url) {
      var filename, parts;
      parts = url.split("/projects/");
      url = parts.pop();
      filename = "{{{fixture_dir}}}" + "/";
      filename += url.replace(/[^a-z0-9]/g, ".");
      return filename;
    };

    return Api;

  })();

  module.exports = Api;

}).call(this);
