// Generated by CoffeeScript 1.7.1
(function() {
  var Api, Util, async, debug, fs, moment, request, util, _;

  util = require("util");

  request = require("request");

  moment = require("moment");

  _ = require("underscore");

  debug = require("debug")("Baseamp:Todo");

  Util = require("./Util");

  fs = require("fs");

  async = require("async");

  Api = (function() {
    Api.prototype.vcr = false;

    Api.prototype.endpoints = {
      todoLists: "https://basecamp.com/{{{account_id}}}/api/v1/projects/{{{project_id}}}/todolists.json"
    };

    function Api(config) {
      this.config = config || {};
      if (this.config.username == null) {
        throw new Error("Need a username");
      }
      if (this.config.password == null) {
        throw new Error("Need a password");
      }
      if (this.config.account_id == null) {
        throw new Error("Need a account_id");
      }
      if (this.config.project_id == null) {
        throw new Error("Need a project_id");
      }
      if (this.config.fixture_dir == null) {
        this.config.fixture_dir = "" + __dirname + "/../test/fixtures";
      }
    }

    Api.prototype.uploadTodoLists = function(todoLists, cb) {
      var list, todo, _i, _j, _len, _len1, _ref, _ref1;
      _ref = todoLists.lists;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        list = _ref[_i];
        debug(util.inspect({
          list: list.name,
          id: list.id
        }));
        _ref1 = list.todos;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          todo = _ref1[_j];
          debug(util.inspect({
            todo: todo.content,
            id: todo.id
          }));
        }
      }
      return cb(null);
    };

    Api.prototype.downloadTodoLists = function(cb) {
      return this._request(this.endpoints["todoLists"], null, (function(_this) {
        return function(err, index) {
          var item, lists, q, retrieveUrls;
          if (err) {
            return cb(err);
          }
          retrieveUrls = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = index.length; _i < _len; _i++) {
              item = index[_i];
              if (item.url != null) {
                _results.push(item.url);
              }
            }
            return _results;
          })();
          if (!retrieveUrls.length) {
            return cb(new Error("Found no urls in index"));
          }
          lists = [];
          q = async.queue(function(url, callback) {
            return _this._request(url, null, function(err, todoList) {
              if (err) {
                debug("Error retrieving " + url + ". " + err);
              }
              lists.push(todoList);
              return callback();
            });
          }, 4);
          q.push(retrieveUrls);
          return q.drain = function() {
            return cb(null, lists);
          };
        };
      })(this));
    };

    Api.prototype._request = function(opts, data, cb) {
      var filename, json;
      if (_.isString(opts)) {
        opts = {
          url: opts
        };
      }
      opts.url = Util.template(opts.url, this.config, opts.replace);
      opts.method = "get";
      opts.json = true;
      opts.auth = {
        username: this.config.username,
        password: this.config.password
      };
      opts.headers = {
        "User-Agent": "Baseamp (https://github.com/kvz/baseamp)"
      };
      if (opts.url.substr(0, 7) === "file://") {
        filename = opts.url.replace(/^file\:\/\//, "");
        json = fs.readFileSync(Util.template(filename, this.config));
        data = JSON.parse(json);
        return cb(null, data);
      }
      return request[opts.method](opts, (function(_this) {
        return function(err, req, data) {
          if (_this.vcr === true && opts.url.substr(0, 7) !== "file://") {
            debug("VCR: Recording " + opts.url + " to disk so we can watch later : )");
            fs.writeFileSync(Util.template(_this._toFixtureFile(opts.url), _this.config), JSON.stringify(_this._toFixture(data), null, 2));
          }
          return cb(err, data);
        };
      })(this));
    };

    Api.prototype._toFixtureVal = function(val, key) {
      var newVal;
      newVal = _.clone(val);
      if (_.isObject(newVal) || _.isArray(newVal)) {
        newVal = this._toFixture(newVal);
      } else if (key === "account_id") {
        newVal = 11;
      } else if (key === "url") {
        newVal = "file://" + this._toFixtureFile(newVal);
      } else if (("" + key).slice(-4) === "_url") {
        newVal = "http://example.com/";
      } else if (_.isNumber(newVal)) {
        newVal = 22;
      } else if (_.isBoolean(newVal)) {
        newVal = false;
      }
      return newVal;
    };

    Api.prototype._toFixture = function(obj) {
      var key, newObj, val, _i, _len;
      newObj = _.clone(obj);
      if (_.isObject(newObj)) {
        for (key in newObj) {
          val = newObj[key];
          newObj[key] = this._toFixtureVal(val, key);
        }
      } else if (_.isArray(newObj)) {
        for (key = _i = 0, _len = newObj.length; _i < _len; key = ++_i) {
          val = newObj[key];
          newObj[key] = this._toFixtureVal(val, key);
        }
      } else {
        newObj = this._toFixtureVal(newObj);
      }
      return newObj;
    };

    Api.prototype._toFixtureFile = function(url) {
      var filename, parts;
      parts = url.split("/projects/");
      url = parts.pop();
      filename = "{{{fixture_dir}}}" + "/";
      filename += url.replace(/[^a-z0-9]/g, ".");
      return filename;
    };

    return Api;

  })();

  module.exports = Api;

}).call(this);
