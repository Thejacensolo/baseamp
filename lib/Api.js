// Generated by CoffeeScript 1.7.1
(function() {
  var Api, TodoList, TodoLists, Util, async, debug, fs, moment, request, util, _;

  util = require("util");

  request = require("request");

  moment = require("moment");

  _ = require("underscore");

  debug = require("debug")("Baseamp:Todo");

  Util = require("./Util");

  fs = require("fs");

  async = require("async");

  TodoLists = require("./TodoLists");

  TodoList = require("./TodoList");

  Api = (function() {
    Api.prototype.vcr = false;

    Api.prototype.endpoints = {
      todoLists: "https://basecamp.com/{{{account_id}}}/api/v1/projects/{{{project_id}}}/todolists.json",
      todoList: "https://basecamp.com/{{{account_id}}}/api/v1/projects/{{{project_id}}}/todolists/{{{todolist_id}}}.json",
      todos: "https://basecamp.com/{{{account_id}}}/api/v1/projects/{{{project_id}}}/todolists/{{{todolist_id}}}/todos.json",
      todo: "https://basecamp.com/{{{account_id}}}/api/v1/projects/{{{project_id}}}/todos/{{{todo_id}}}.json"
    };

    function Api(config) {
      this.config = config || {};
      if (this.config.username == null) {
        throw new Error("Need a username");
      }
      if (this.config.password == null) {
        throw new Error("Need a password");
      }
      if (this.config.account_id == null) {
        throw new Error("Need a account_id");
      }
      if (this.config.project_id == null) {
        throw new Error("Need a project_id");
      }
      if (this.config.fixture_dir == null) {
        this.config.fixture_dir = "" + __dirname + "/../test/fixtures";
      }
    }

    Api.prototype._itemIdMatch = function(type, displayField, item, remoteIds) {
      var remoteId, remoteItem, remoteItemsWithSameName;
      if (!item.id || (remoteIds[type][item.id] == null)) {
        remoteItemsWithSameName = (function() {
          var _ref, _results;
          _ref = remoteIds[type];
          _results = [];
          for (remoteId in _ref) {
            remoteItem = _ref[remoteId];
            if (remoteItem[displayField] === item[displayField]) {
              _results.push(remoteItem);
            }
          }
          return _results;
        })();
        if (remoteItemsWithSameName.length) {
          item.id = remoteItemsWithSameName[remoteItemsWithSameName.length - 1].id;
        } else {
          item.id = void 0;
        }
      }
      return item;
    };

    Api.prototype._uploadItems = function(type, displayField, items, remoteIds, cb) {
      var errors, q;
      errors = [];
      q = async.queue((function(_this) {
        return function(item, qCb) {
          var isUpdate, opts, payload, remoteItem, _ref;
          item = _this._itemIdMatch(type, displayField, item, remoteIds);
          remoteItem = remoteIds[type][item.id];
          isUpdate = remoteItem != null;
          _ref = item.apiPayload(isUpdate, _this.endpoints), opts = _ref.opts, payload = _ref.payload;
          if (isUpdate && !_this._itemDiffs(remoteItem, displayField, payload)) {
            debug("SKIP " + item[displayField]);
            return qCb();
          }
          return _this._request(opts, payload, function(err, data) {
            if (err) {
              errors.push("Errors while " + opts.method + " " + opts.url + ". " + err);
              return qCb();
            }
            item.id = data.id;
            return qCb();
          });
        };
      })(this), 4);
      q.drain = (function(_this) {
        return function() {
          if (errors.length) {
            return cb(errors.join('\n'));
          }
          return cb(null);
        };
      })(this);
      return q.push(items);
    };

    Api.prototype._itemDiffs = function(remoteItem, displayField, payload) {
      var key, val;
      for (key in payload) {
        val = payload[key];
        if (payload[key] !== remoteItem[key]) {
          debug("Items " + payload[displayField] + " diffs becasue payload key " + key + " " + payload[key] + " != remoteItem's: " + remoteItem[key]);
          return true;
        }
      }
      return false;
    };

    Api.prototype.uploadTodoLists = function(localLists, cb) {
      return async.waterfall([
        (function(_this) {
          return function(callback) {
            return _this.downloadTodoLists(function(err, remoteLists) {
              var list, remoteIds, remoteTodoLists, todo, _i, _j, _len, _len1, _ref, _ref1;
              if (err) {
                return callback(err);
              }
              remoteIds = {
                lists: {},
                todos: {}
              };
              remoteTodoLists = new TodoLists(remoteLists);
              _ref = remoteTodoLists.lists;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                list = _ref[_i];
                remoteIds["lists"][list.id] = list;
                _ref1 = list.todos;
                for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                  todo = _ref1[_j];
                  remoteIds["todos"][todo.id] = todo;
                }
              }
              return callback(null, remoteIds);
            });
          };
        })(this), (function(_this) {
          return function(remoteIds, callback) {
            return _this._uploadItems("lists", "name", localLists.lists, remoteIds, function(err) {
              return callback(err, remoteIds);
            });
          };
        })(this), (function(_this) {
          return function(remoteIds, callback) {
            var allTodos, list, todo, _i, _j, _len, _len1, _ref, _ref1;
            allTodos = [];
            _ref = localLists.lists;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              list = _ref[_i];
              _ref1 = list.todos;
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                todo = _ref1[_j];
                if (!todo) {
                  return callback(new Error("No todo!"));
                }
                if (todo.todolist_id == null) {
                  todo.todolist_id = list.id;
                }
                if (todo.todolist_id == null) {
                  debug(util.inspect({
                    todo: todo,
                    list_id: list.id
                  }));
                  return callback(new Error("Todo's todolist_id should be known here!"));
                }
                allTodos.push(todo);
              }
            }
            return _this._uploadItems("todos", "content", allTodos, remoteIds, function(err) {
              return callback(err);
            });
          };
        })(this)
      ], (function(_this) {
        return function(err, res) {
          return cb(err);
        };
      })(this));
    };

    Api.prototype.downloadTodoLists = function(cb) {
      return this._request(this.endpoints["todoLists"], null, (function(_this) {
        return function(err, lists) {
          var errors, list, q, retrieveUrls;
          if (err) {
            return cb(err);
          }
          retrieveUrls = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = lists.length; _i < _len; _i++) {
              list = lists[_i];
              if (list.url != null) {
                _results.push(list.url);
              }
            }
            return _results;
          })();
          if (!retrieveUrls.length) {
            debug("Found no lists urls (yet)");
            return cb(null, []);
          }
          errors = [];
          lists = [];
          q = async.queue(function(url, callback) {
            return _this._request(url, null, function(err, todoList) {
              if (err) {
                errors.push("Error retrieving " + url + ". " + err);
                return callback();
              }
              lists.push(todoList);
              return callback();
            });
          }, 4);
          q.push(retrieveUrls);
          return q.drain = function() {
            if (errors.length) {
              return cb(errors.join('\n'));
            }
            return cb(null, lists);
          };
        };
      })(this));
    };

    Api.prototype._request = function(opts, payload, cb) {
      var data, filename, json;
      if (_.isString(opts)) {
        opts = {
          url: opts
        };
      }
      opts.url = Util.template(opts.url, this.config, opts.replace);
      opts.body = payload;
      if (opts.method == null) {
        opts.method = "get";
      }
      if (opts.json == null) {
        opts.json = true;
      }
      if (opts.auth == null) {
        opts.auth = {
          username: this.config.username,
          password: this.config.password
        };
      }
      if (opts.headers == null) {
        opts.headers = {
          "User-Agent": "Baseamp (https://github.com/kvz/baseamp)"
        };
      }
      if (opts.url.substr(0, 7) === "file://") {
        filename = opts.url.replace(/^file\:\/\//, "");
        json = fs.readFileSync(Util.template(filename, this.config));
        data = JSON.parse(json);
        return cb(null, data);
      }
      debug("" + (opts.method.toUpperCase()) + " " + opts.url);
      return request[opts.method](opts, (function(_this) {
        return function(err, req, data) {
          var msg, status;
          status = "" + req.statusCode;
          if (!status.match(/[23][0-9]{2}/)) {
            msg = "Status code " + status + " during " + (opts.method.toUpperCase()) + " '" + opts.url + "'";
            err = new Error(msg);
            return cb(err, data);
          }
          if (_this.vcr === true && opts.url.substr(0, 7) !== "file://") {
            debug("VCR: Recording " + opts.url + " to disk so we can watch later : )");
            fs.writeFileSync(Util.template(_this._toFixtureFile(opts.url), _this.config), JSON.stringify(_this._toFixture(data), null, 2));
          }
          return cb(err, data);
        };
      })(this));
    };

    Api.prototype._toFixtureVal = function(val, key) {
      var newVal;
      newVal = _.clone(val);
      if (_.isObject(newVal) || _.isArray(newVal)) {
        newVal = this._toFixture(newVal);
      } else if (key === "account_id") {
        newVal = 11;
      } else if (key === "url") {
        newVal = "file://" + this._toFixtureFile(newVal);
      } else if (("" + key).slice(-4) === "_url") {
        newVal = "http://example.com/";
      } else if (_.isNumber(newVal)) {
        newVal = 22;
      } else if (_.isBoolean(newVal)) {
        newVal = false;
      }
      return newVal;
    };

    Api.prototype._toFixture = function(obj) {
      var key, newObj, val, _i, _len;
      newObj = _.clone(obj);
      if (_.isObject(newObj)) {
        for (key in newObj) {
          val = newObj[key];
          newObj[key] = this._toFixtureVal(val, key);
        }
      } else if (_.isArray(newObj)) {
        for (key = _i = 0, _len = newObj.length; _i < _len; key = ++_i) {
          val = newObj[key];
          newObj[key] = this._toFixtureVal(val, key);
        }
      } else {
        newObj = this._toFixtureVal(newObj);
      }
      return newObj;
    };

    Api.prototype._toFixtureFile = function(url) {
      var filename, parts;
      parts = url.split("/projects/");
      url = parts.pop();
      filename = "{{{fixture_dir}}}" + "/";
      filename += url.replace(/[^a-z0-9]/g, ".");
      return filename;
    };

    return Api;

  })();

  module.exports = Api;

}).call(this);

//# sourceMappingURL=Api.map
