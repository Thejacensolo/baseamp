// Generated by CoffeeScript 1.7.1
(function() {
  var Todo, Util, debug, util, _;

  util = require("util");

  _ = require("underscore");

  debug = require("debug")("Baseamp:Todo");

  Util = require("./Util");

  Todo = (function() {
    function Todo(input, defaults) {
      var todo;
      if (input == null) {
        todo = {};
      } else if (_.isString(input)) {
        todo = this.fromMarkdown(input);
      } else {
        todo = this.fromApi(input);
      }
      _.defaults(todo, defaults);
      if (todo == null) {
        return;
      }
      if (todo.id != null) {
        this.id = Number(todo.id);
      }
      this.due_at = todo.due_at;
      this.assignee = todo.assignee;
      this.content = todo.content;
      this.completed = todo.completed;
      this.position = Number(todo.position);
      this.todolist_id = Number(todo.todolist_id);
    }

    Todo.prototype.fromApi = function(input) {
      var assignee, todo;
      assignee = void 0;
      if (input.assignee != null) {
        assignee = Util.formatNameAsUnixHandle(input.assignee.name);
        debug("Received assignee from API: ");
        debug(util.inspect({
          assignee: assignee
        }));
      }
      todo = {
        due_at: input.due_at,
        assignee: assignee,
        id: input.id,
        content: input.content,
        completed: input.completed,
        position: input.position,
        todolist_id: input.todolist_id
      };
      return todo;
    };

    Todo.prototype.apiPayload = function(item) {
      var payload;
      if (item == null) {
        item = this;
      }
      payload = {
        content: item.content,
        position: item.position,
        todolist_id: item.todolist_id,
        completed: item.completed,
        assignee: item.assignee
      };
      if (item.completed) {
        delete payload.position;
      }
      return payload;
    };

    Todo.prototype.fromMarkdown = function(line) {
      var id, m, pattern, todo, _ref;
      line = line.replace(/^[\s\-]+|[\s\-]+$/g, "");
      _ref = Util.extractId(line), id = _ref.id, line = _ref.line;
      pattern = "^";
      pattern += "\\[(x| )\\]\\s+";
      pattern += "((\\d{4}-\\d{2}-\\d{2})\\s+)?";
      pattern += "(([A-Z]{3})\\s+)?";
      pattern += "(.+)";
      pattern += "$";
      m = line.match(new RegExp(pattern));
      if (!m) {
        debug("Cannot match '" + line + "'");
        return null;
      }
      todo = {
        due_at: m[3],
        assignee: m[5],
        completed: m[1] === 'x' ? true : false,
        content: m[6],
        id: id
      };
      return todo;
    };

    Todo.prototype.toMarkdown = function() {
      var buf;
      buf = " - ";
      if (this.trashed) {
        return "";
      } else if (this.completed === true) {
        buf += "[x] ";
      } else if (this.completed === false) {
        buf += "[ ] ";
      } else {
        throw new Error("Unknown category");
      }
      if (this.due_at != null) {
        buf += Util.formatDate(this.due_at) + " ";
      }
      if (this.assignee != null) {
        buf += Util.formatNameAsUnixHandle(this.assignee) + " ";
      }
      buf += "" + this.content + " ";
      if (this.id != null) {
        buf += "(#" + this.id + ")";
      }
      buf += "\n";
      return buf;
    };

    return Todo;

  })();

  module.exports = Todo;

}).call(this);

//# sourceMappingURL=Todo.map
