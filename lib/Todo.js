// Generated by CoffeeScript 1.7.1
(function() {
  var Todo, Util, debug, moment, util, _;

  util = require("util");

  moment = require("moment");

  _ = require("underscore");

  debug = require("debug")("Baseamp:Todo");

  Util = require("./Util");

  Todo = (function() {
    function Todo(input) {
      var todo;
      if (input == null) {
        todo = {};
      } else if (_.isString(input)) {
        todo = this.fromMarkdown(input);
      } else {
        todo = this.fromApi(input);
      }
      if (todo == null) {
        return;
      }
      this.due_at = todo.due_at;
      this.assignee = todo.assignee;
      this.id = todo.id;
      this.content = todo.content;
      this.category = todo.category;
    }

    Todo.prototype.fromApi = function(input) {
      var category, todo, _ref;
      category = "remaining";
      if (input.completed === true) {
        category = "completed";
      }
      if (input.trashed === true) {
        category = "trashed";
      }
      todo = {
        due_at: input.due_at,
        assignee: ((_ref = input.assignee) != null ? _ref.name : void 0) || input.assignee,
        id: input.id,
        content: input.content,
        category: category
      };
      return todo;
    };

    Todo.prototype.fromMarkdown = function(line) {
      var id, m, pattern, todo, _ref;
      line = line.replace(/^[\s\-]+|[\s\-]+$/g, "");
      _ref = Util.extractId(line), id = _ref.id, line = _ref.line;
      pattern = "^";
      pattern += "\\[(x| )\\]\\s+";
      pattern += "((\\d{4}-\\d{2}-\\d{2})\\s+)?";
      pattern += "(([A-Z]{3})\\s+)?";
      pattern += "(.+)";
      pattern += "$";
      m = line.match(new RegExp(pattern));
      if (!m) {
        debug("Cannot match '" + line + "'");
        return null;
      }
      todo = {
        due_at: m[3],
        assignee: m[5],
        category: m[1] === 'x' ? "completed" : "remaining",
        content: m[6],
        id: id
      };
      return todo;
    };

    Todo.prototype._formatDate = function(str) {
      if (!str) {
        return "0000-00-00";
      }
      return moment(str).format("YYYY-MM-DD");
    };

    Todo.prototype._formatName = function(str) {
      var first, handle, howMany, i, part, parts, _i, _len;
      if (!str) {
        return str;
      }
      str = "" + str;
      str = str.replace(/[^a-z\s]/i, "");
      handle = "";
      parts = str.split(/\s+/);
      first = 4 - parts.length;
      for (i = _i = 0, _len = parts.length; _i < _len; i = ++_i) {
        part = parts[i];
        howMany = 1;
        if (i === 0) {
          howMany = first;
        }
        handle += part.substr(0, howMany).toUpperCase();
      }
      return handle;
    };

    Todo.prototype.toMarkdown = function() {
      var buf;
      buf = " - ";
      if (this.category === "completed") {
        buf += "[x] ";
      } else if (this.category === "remaining") {
        buf += "[ ] ";
      } else if (this.category === "trashed") {
        return "";
      } else {
        throw new Error("Unknown category " + this.category);
      }
      if (this.due_at != null) {
        buf += this._formatDate(this.due_at) + " ";
      }
      if (this.assignee != null) {
        buf += this._formatName(this.assignee) + " ";
      }
      buf += "" + this.content + " ";
      if (this.id != null) {
        buf += "(#" + this.id + ")";
      }
      buf += "\n";
      return buf;
    };

    return Todo;

  })();

  module.exports = Todo;

}).call(this);
