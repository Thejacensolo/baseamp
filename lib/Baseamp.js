// Generated by CoffeeScript 1.7.1
(function() {
  var Baseamp, Mustache, async, debug, fs, request, util, _;

  request = require("request");

  util = require("util");

  _ = require("underscore");

  fs = require("fs");

  async = require("async");

  debug = require("debug")("Baseamp:Baseamp");

  Mustache = require("mustache");

  Baseamp = (function() {
    Baseamp.prototype.endpoints = {
      todolists: "https://basecamp.com/{{{account_id}}}/api/v1/projects/{{{project_id}}}/todolists.json"
    };

    function Baseamp(config) {
      this.config = config || {};
      if (this.config.username == null) {
        throw new Error("Need a username");
      }
      if (this.config.password == null) {
        throw new Error("Need a password");
      }
      if (this.config.account_id == null) {
        throw new Error("Need a account_id");
      }
      if (this.config.project_id == null) {
        throw new Error("Need a project_id");
      }
      if (this.config.fixture_dir == null) {
        this.config.fixture_dir = "" + __dirname + "/../test/fixtures";
      }
    }

    Baseamp.prototype._tmpltr = function(url, params) {
      var key, replace, val;
      replace = this.config;
      if (params != null) {
        for (key in params) {
          val = params[key];
          replace[key] = val;
        }
      }
      return Mustache.render(url, replace);
    };

    Baseamp.prototype._request = function(opts, data, cb) {
      if (typeof opts === "string") {
        opts = {
          url: opts
        };
      }
      opts.url = this._tmpltr(opts.url, opts.replace);
      opts.json = true;
      opts.auth = {
        username: this.config.username,
        password: this.config.password
      };
      opts.headers = {
        "User-Agent": "Baseamp (https://github.com/kvz/baseamp)"
      };
      return request.get(opts, (function(_this) {
        return function(err, req, data) {
          fs.writeFileSync(_this._tmpltr(_this._toFixtureFile(opts.url)), JSON.stringify(_this._toFixture(data), null, 2));
          return cb(err, data);
        };
      })(this));
    };

    Baseamp.prototype._toFixtureVal = function(val, key) {
      var newVal;
      newVal = _.clone(val);
      if (_.isObject(newVal) || _.isArray(newVal)) {
        newVal = this._toFixture(newVal);
      } else if (key === "account_id") {
        newVal = 11;
      } else if (key === "url") {
        newVal = "file://" + this._toFixtureFile(newVal);
      } else if (("" + key).slice(-4) === "_url") {
        newVal = "http://example.com/";
      } else if (_.isNumber(newVal)) {
        newVal = 22;
      } else if (_.isBoolean(newVal)) {
        newVal = false;
      }
      return newVal;
    };

    Baseamp.prototype._toFixture = function(obj) {
      var key, newObj, val, _i, _len;
      newObj = _.clone(obj);
      if (_.isObject(newObj)) {
        for (key in newObj) {
          val = newObj[key];
          newObj[key] = this._toFixtureVal(val, key);
        }
      } else if (_.isArray(newObj)) {
        for (key = _i = 0, _len = newObj.length; _i < _len; key = ++_i) {
          val = newObj[key];
          newObj[key] = this._toFixtureVal(val, key);
        }
      } else {
        newObj = this._toFixtureVal(newObj);
      }
      return newObj;
    };

    Baseamp.prototype._toFixtureFile = function(url) {
      var filename, parts;
      parts = url.split("/projects/");
      url = parts.pop();
      filename = "{{{fixture_dir}}}" + "/";
      filename += url.replace(/[^a-z0-9]/g, ".");
      return filename;
    };

    Baseamp.prototype.getTodoLists = function(cb) {
      return this._request(this.endpoints["todolists"], null, (function(_this) {
        return function(err, todolists) {
          var q, todolist, todolist_urls;
          if (err) {
            return cb(err);
          }
          todolist_urls = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = todolists.length; _i < _len; _i++) {
              todolist = todolists[_i];
              _results.push(todolist.url);
            }
            return _results;
          })();
          todolists = {};
          q = async.queue(function(url, callback) {
            debug(url);
            return _this._request(url, null, function(err, todolist) {
              if (err) {
                debug(err);
              }
              todolists[url] = todolist;
              return callback();
            });
          }, 4);
          q.push(todolist_urls);
          return q.drain = function() {
            return cb(null, todolists);
          };
        };
      })(this));
    };

    Baseamp.prototype["import"] = function(file, cb) {
      return this.getTodoLists(function(err, todolists) {
        if (err) {
          return cb(err);
        }
        debug(util.inspect({
          todolists: todolists,
          file: file
        }));
        return cb(null);
      });
    };

    module.exports = Baseamp;

    return Baseamp;

  })();

}).call(this);
