// Generated by CoffeeScript 1.7.1
(function() {
  var Baseamp, Mustache, TodoList, async, debug, fs, request, util, _;

  request = require("request");

  util = require("util");

  _ = require("underscore");

  fs = require("fs");

  async = require("async");

  debug = require("debug")("Baseamp:Baseamp");

  Mustache = require("mustache");

  TodoList = require("./TodoList");

  Baseamp = (function() {
    Baseamp.prototype.endpoints = {
      todoLists: "https://basecamp.com/{{{account_id}}}/api/v1/projects/{{{project_id}}}/todolists.json"
    };

    function Baseamp(config) {
      this.config = config || {};
      if (this.config.username == null) {
        throw new Error("Need a username");
      }
      if (this.config.password == null) {
        throw new Error("Need a password");
      }
      if (this.config.account_id == null) {
        throw new Error("Need a account_id");
      }
      if (this.config.project_id == null) {
        throw new Error("Need a project_id");
      }
      if (this.config.fixture_dir == null) {
        this.config.fixture_dir = "" + __dirname + "/../test/fixtures";
      }
    }

    Baseamp.prototype._tmpltr = function(url, params) {
      var key, replace, val;
      replace = this.config;
      if (params != null) {
        for (key in params) {
          val = params[key];
          replace[key] = val;
        }
      }
      return Mustache.render(url, replace);
    };

    Baseamp.prototype._request = function(opts, data, cb) {
      var filename, json;
      if (_.isString(opts)) {
        opts = {
          url: opts
        };
      }
      opts.url = this._tmpltr(opts.url, opts.replace);
      opts.json = true;
      opts.auth = {
        username: this.config.username,
        password: this.config.password
      };
      opts.headers = {
        "User-Agent": "Baseamp (https://github.com/kvz/baseamp)"
      };
      if (opts.url.substr(0, 7) === "file://") {
        filename = opts.url.replace(/^file\:\/\//, "");
        json = fs.readFileSync(this._tmpltr(filename));
        data = JSON.parse(json);
        return cb(null, data);
      }
      return request.get(opts, (function(_this) {
        return function(err, req, data) {
          if (opts.url.substr(0, 7) !== "file://") {
            fs.writeFileSync(_this._tmpltr(_this._toFixtureFile(opts.url)), JSON.stringify(_this._toFixture(data), null, 2));
          }
          return cb(err, data);
        };
      })(this));
    };

    Baseamp.prototype._toFixtureVal = function(val, key) {
      var newVal;
      newVal = _.clone(val);
      if (_.isObject(newVal) || _.isArray(newVal)) {
        newVal = this._toFixture(newVal);
      } else if (key === "account_id") {
        newVal = 11;
      } else if (key === "url") {
        newVal = "file://" + this._toFixtureFile(newVal);
      } else if (("" + key).slice(-4) === "_url") {
        newVal = "http://example.com/";
      } else if (_.isNumber(newVal)) {
        newVal = 22;
      } else if (_.isBoolean(newVal)) {
        newVal = false;
      }
      return newVal;
    };

    Baseamp.prototype._toFixture = function(obj) {
      var key, newObj, val, _i, _len;
      newObj = _.clone(obj);
      if (_.isObject(newObj)) {
        for (key in newObj) {
          val = newObj[key];
          newObj[key] = this._toFixtureVal(val, key);
        }
      } else if (_.isArray(newObj)) {
        for (key = _i = 0, _len = newObj.length; _i < _len; key = ++_i) {
          val = newObj[key];
          newObj[key] = this._toFixtureVal(val, key);
        }
      } else {
        newObj = this._toFixtureVal(newObj);
      }
      return newObj;
    };

    Baseamp.prototype._toFixtureFile = function(url) {
      var filename, parts;
      parts = url.split("/projects/");
      url = parts.pop();
      filename = "{{{fixture_dir}}}" + "/";
      filename += url.replace(/[^a-z0-9]/g, ".");
      return filename;
    };

    Baseamp.prototype.getTodoLists = function(cb) {
      return this._request(this.endpoints["todoLists"], null, (function(_this) {
        return function(err, index) {
          var item, lists, q, retrieveUrls;
          if (err) {
            return cb(err);
          }
          retrieveUrls = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = index.length; _i < _len; _i++) {
              item = index[_i];
              if (item.url != null) {
                _results.push(item.url);
              }
            }
            return _results;
          })();
          if (!retrieveUrls.length) {
            return cb(new Error("Found no urls in index"));
          }
          lists = [];
          q = async.queue(function(url, callback) {
            return _this._request(url, null, function(err, todoList) {
              if (err) {
                debug("Error retrieving " + url + ". " + err);
              }
              lists.push(new TodoList(todoList));
              return callback();
            });
          }, 4);
          q.push(retrieveUrls);
          return q.drain = function() {
            return cb(null, lists);
          };
        };
      })(this));
    };

    Baseamp.prototype["import"] = function(file, cb) {
      return this.getTodoLists(function(err, todoLists) {
        var buf, todoList, _i, _len;
        if (err) {
          return cb(err);
        }
        buf = "";
        for (_i = 0, _len = todoLists.length; _i < _len; _i++) {
          todoList = todoLists[_i];
          buf += todoList.toMarkdown();
        }
        if (file === "-") {
          console.log(buf);
        } else {
          console.log("Writing todo to " + file);
          fs.writeFileSync(file, buf);
        }
        return cb(null, "winning");
      });
    };

    Baseamp.prototype["export"] = function(file, cb) {
      var buf, part, parts, todoLists, _i, _len;
      buf = fs.readFileSync(file, "utf-8");
      parts = buf.split(/^##/);
      todoLists = [];
      for (_i = 0, _len = parts.length; _i < _len; _i++) {
        part = parts[_i];
        part = "##" + part;
        todoLists.push(new TodoList(part));
      }
      return debug(util.inspect({
        parts: parts,
        todoList: todoLists[0].todos
      }, cb(null, "winning")));
    };

    return Baseamp;

  })();

  module.exports = Baseamp;

}).call(this);
