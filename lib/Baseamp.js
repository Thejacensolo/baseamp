// Generated by CoffeeScript 1.7.1
(function() {
  var Baseamp, Mustache, async, debug, request, util;

  request = require("request");

  util = require("util");

  async = require("async");

  debug = require("debug")("Baseamp:Baseamp");

  Mustache = require("Mustache");

  Baseamp = (function() {
    Baseamp.prototype.endpoints = {
      todolists: "https://basecamp.com/{{account_id}}/api/v1/projects/{{project_id}}/todolists.json"
    };

    function Baseamp(config) {
      this.config = config || {};
      if (this.config.username == null) {
        throw new Error("Need a username");
      }
      if (this.config.password == null) {
        throw new Error("Need a password");
      }
      if (this.config.account_id == null) {
        throw new Error("Need a account_id");
      }
      if (this.config.project_id == null) {
        throw new Error("Need a project_id");
      }
    }

    Baseamp.prototype._request = function(opts, data, cb) {
      var key, replace, val, _ref;
      if (typeof opts === "string") {
        opts = {
          url: opts
        };
      }
      replace = this.config;
      _ref = opts.replace;
      for (key in _ref) {
        val = _ref[key];
        replace[key] = val;
      }
      opts.url = Mustache.render(opts.url, replace);
      opts.json = true;
      opts.auth = {
        username: this.config.username,
        password: this.config.password
      };
      opts.headers = {
        "User-Agent": "Baseamp (https://github.com/kvz/baseamp)"
      };
      return request.get(opts, function(err, req, data) {
        return cb(err, data);
      });
    };

    Baseamp.prototype.getTodoLists = function(cb) {
      return this._request(this.endpoints["todolists"], null, (function(_this) {
        return function(err, todolists) {
          var q, todolist, todolist_urls;
          if (err) {
            return cb(err);
          }
          todolist_urls = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = todolists.length; _i < _len; _i++) {
              todolist = todolists[_i];
              _results.push(todolist.url);
            }
            return _results;
          })();
          todolists = {};
          q = async.queue(function(url, callback) {
            debug(url);
            return _this._request(url, null, function(err, todolist) {
              if (err) {
                debug(err);
              }
              todolists[url] = todolist;
              return callback();
            });
          }, 4);
          q.push(todolist_urls);
          return q.drain = function() {
            return cb(null, todolists);
          };
        };
      })(this));
    };

    Baseamp.prototype["import"] = function(file, cb) {
      return this.getTodoLists(function(err, todolists) {
        if (err) {
          return cb(err);
        }
        debug(util.inspect({
          todolists: todolists,
          file: file
        }));
        return cb(null);
      });
    };

    module.exports = Baseamp;

    return Baseamp;

  })();

}).call(this);
