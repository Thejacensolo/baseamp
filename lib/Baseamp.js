// Generated by CoffeeScript 1.7.1
(function() {
  var Api, Baseamp, TodoLists, Util, async, debug, fs, moment, packageJson, util, _;

  util = require("util");

  fs = require("fs");

  async = require("async");

  moment = require("moment");

  _ = require("underscore");

  debug = require("debug")("Baseamp:Baseamp");

  TodoLists = require("./TodoLists");

  Util = require("./Util");

  Api = require("./Api");

  packageJson = require("../package.json");

  Baseamp = (function() {
    function Baseamp(config) {
      this.api = new Api(config);
    }

    Baseamp.prototype.version = function(file, cb) {
      var stderr, stdout;
      stdout = "";
      stderr = "";
      stderr += "v" + packageJson.version;
      return cb(null, stdout, stderr);
    };

    Baseamp.prototype.help = function(file, cb) {
      var stderr, stdout;
      stdout = "";
      stderr = "";
      stderr += "" + packageJson.name + " v" + packageJson.version + "\n";
      stderr += " \n";
      stderr += " Usage:\n";
      stderr += " \n";
      stderr += "   " + packageJson.name + " action [args]\n";
      stderr += " \n";
      stderr += " Actions:\n";
      stderr += " \n";
      stderr += "       sync [file]  Syncs todos between Basecamp and markdown file\n";
      stderr += "   download [file]  Downloads latest todos from Basecamp, saved to file or STDOUT(-)\n";
      stderr += "     upload [file]  Uploads latest todos to Basecamp, sourcing from file\n";
      stderr += "    version         Reports version\n";
      stderr += "       help         This page\n";
      stderr += "\n";
      stderr += " More info: https://github.com/kvz/baseamp\n";
      return cb(null, stdout, stderr);
    };

    Baseamp.prototype.weekstarter = function(file, now, cb) {
      var buf, daySaturday, due_at, name, periodEnds, periods, stderr, stdout, todo, todoLists, todos, week, weeks, _base, _base1, _i, _j, _len, _len1, _ref;
      stderr = "Read todo from " + file + "\n";
      stdout = "";
      if (!now || _.isFunction(now)) {
        cb = now;
        now = +new Date();
      }
      daySaturday = 6;
      periods = {
        prev: +moment(now).day(daySaturday - 14),
        curr: +moment(now).day(daySaturday - 7),
        next: +moment(now).day(daySaturday + 0)
      };
      buf = fs.readFileSync(file, "utf-8");
      todoLists = new TodoLists(buf);
      todos = todoLists.searchBetween(periods.prev, periods.next);
      weeks = {};
      for (_i = 0, _len = todos.length; _i < _len; _i++) {
        todo = todos[_i];
        due_at = +moment(todo.due_at);
        if (due_at >= periods.prev && due_at < periods.curr) {
          periodEnds = periods.curr;
          week = "Last";
        }
        if (due_at >= periods.curr && due_at <= periods.next) {
          periodEnds = periods.next;
          week = "This";
        }
        if (weeks[week] == null) {
          weeks[week] = {};
        }
        if ((_base = weeks[week]).periodEnds == null) {
          _base.periodEnds = periodEnds;
        }
        if ((_base1 = weeks[week]).todos == null) {
          _base1.todos = [];
        }
        weeks[week].todos.push(todo.toMarkdown());
      }
      for (name in weeks) {
        week = weeks[name];
        stdout += "## " + name + " week (until " + (Util.formatDate(week.periodEnds)) + ")\n\n";
        week.todos.sort();
        _ref = week.todos;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          todo = _ref[_j];
          stdout += todo;
        }
        stdout += "\n";
      }
      return cb(null, stdout, stderr);
    };

    Baseamp.prototype.upload = function(file, cb) {
      var buf, cbDone, changes, counter, stderr, stdout, todoLists;
      stderr = "Read todo from " + file + "\n";
      stdout = "";
      buf = fs.readFileSync(file, "utf-8");
      todoLists = new TodoLists(buf);
      counter = 0;
      changes = -1;
      cbDone = (function(_this) {
        return function(err, stats) {
          if (err) {
            return cb(err);
          }
          changes = stats.listsPushed + stats.todosPushed;
          counter += changes;
          debug("changes = " + changes);
          if (changes > 0) {
            return _this.api.uploadTodoLists(todoLists, cbDone);
          } else {
            stderr += "Uploaded " + counter + " changes. \n";
            return cb(err, stdout, stderr);
          }
        };
      })(this);
      return this.api.uploadTodoLists(todoLists, cbDone);
    };

    Baseamp.prototype.download = function(file, cb) {
      return this.api.downloadTodoLists(function(err, todoLists) {
        var buf, stderr, stdout;
        if (err) {
          return cb(err);
        }
        todoLists = new TodoLists(todoLists);
        buf = todoLists.toMarkdown();
        if (file === "-") {
          stderr = "";
          stdout = buf;
        } else {
          fs.writeFileSync(file, buf, "utf-8");
          stderr = "Written todo to " + file + "\n";
          stdout = "";
        }
        return cb(null, stdout, stderr);
      });
    };

    Baseamp.prototype.sync = function(file, cb) {
      return this.upload(file, (function(_this) {
        return function(err, stdoutUpload, stderrUpload) {
          if (err) {
            return cb(err);
          }
          return _this.download(file, function(err, stdoutDownload, stderrDownload) {
            if (err) {
              return cb(err);
            }
            return cb(null, "" + stdoutUpload + stdoutDownload, "" + stderrUpload + stderrDownload);
          });
        };
      })(this));
    };

    return Baseamp;

  })();

  module.exports = Baseamp;

}).call(this);

//# sourceMappingURL=Baseamp.map
