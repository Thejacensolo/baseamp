// Generated by CoffeeScript 1.7.1
(function() {
  var Mustache, Util, moment,
    __slice = [].slice;

  Mustache = require("mustache");

  moment = require("moment");

  Util = (function() {
    function Util() {}

    Util.extractId = function(line) {
      var id, m;
      id = void 0;
      m = ("" + line).match(/\s+\(#(\d+)\)$/);
      if (m != null ? m[1] : void 0) {
        id = m[1];
        line = line.replace(m[0], "");
      }
      return {
        id: id,
        line: line
      };
    };

    Util.sortByObjField = function() {
      var array, fields;
      array = arguments[0], fields = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return array.sort(function(a, b) {
        var field, negate, _i, _len;
        for (_i = 0, _len = fields.length; _i < _len; _i++) {
          field = fields[_i];
          negate = 1;
          if (field === "completed") {
            negate = -1;
          }
          if (a[field] < b[field]) {
            return -1 * negate;
          }
          if (a[field] > b[field]) {
            return 1 * negate;
          }
        }
        return 0;
      });
    };

    Util.template = function() {
      var args, key, params, replace, url, val, _i, _len;
      url = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      replace = {};
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        params = args[_i];
        for (key in params) {
          val = params[key];
          replace[key] = val;
        }
      }
      return Mustache.render(url, replace);
    };

    Util.formatDate = function(str) {
      if (!str) {
        return "0000-00-00";
      }
      return moment(str).format("YYYY-MM-DD");
    };

    Util.formatNameAsUnixHandle = function(str) {
      var first, handle, howMany, i, part, parts, _i, _len;
      if (!str) {
        return str;
      }
      str = "" + str;
      str = str.replace(/[^a-z\s]/i, "");
      handle = "";
      parts = str.split(/\s+/);
      first = 4 - parts.length;
      for (i = _i = 0, _len = parts.length; _i < _len; i = ++_i) {
        part = parts[i];
        howMany = 1;
        if (i === 0) {
          howMany = first;
        }
        handle += part.substr(0, howMany).toUpperCase();
      }
      return handle;
    };

    return Util;

  })();

  module.exports = Util;

}).call(this);

//# sourceMappingURL=Util.map
